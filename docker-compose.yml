version: '3.8'

services:
  zookeeper:
    container_name: zookeeper
    healthcheck:
      test: ["CMD", "sh", "-c", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 5s
      timeout: 3s
      retries: 10
    image: confluentinc/cp-zookeeper:7.3.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  ollama:
    container_name: ollama
    build:
      context: .
      dockerfile: Dockerfile.ollama
    ports:
      - "11434:11434"

  kafka:
    container_name: kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    image: confluentinc/cp-kafka:7.3.2
    depends_on: [zookeeper]
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  chromadb:
    container_name: chromadb
    image: chromadb/chroma:latest
    ports:
      - 8000:8000
    volumes:
      - chroma_data:/chroma/chroma

  postgres:  
    container_name: postgres
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: raguser
      POSTGRES_PASSWORD: ragpass
      POSTGRES_DB: ragdb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  jobmanager:
    image: flink:1.17.1-scala_2.12
    ports:
      - "8082:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    volumes:
      - ./flink:/opt/flink/usrlib

  flink:
    container_name: flink
    image: flink:1.17.1-scala_2.12
    depends_on:
      - kafka
    command: taskmanager
    volumes:
      - ./flink:/opt/flink/usrlib
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager

  dashboard:
    build: ./dashboard
    ports:
      - "5050:5000"
    volumes:
      - ./dashboard:/app
    depends_on:
      - chromadb

  producer:
    depends_on:
      kafka:
        condition: service_healthy
    build:
      context: .
      dockerfile: python-app/Dockerfile
    environment:
      - PYTHONUNBUFFERED=1

  llm_processor:
    build:
      context: .
      dockerfile: python-app/Dockerfile
    command: ["sh", "-c", "while true; do python rag/llm_agent.py; sleep 30; done"]
    depends_on:
      kafka:
        condition: service_healthy
      chromadb:
        condition: service_started
      postgres:
        condition: service_started
    environment:
      - PYTHONUNBUFFERED=1

volumes:
  chroma_data:
  pgdata:
